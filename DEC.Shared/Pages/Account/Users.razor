@page "/users"

@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject IPhoneDiallerService PhoneDialler
@inject AuthenticationStateProvider AuthStateProvider

@using DEC.Shared.CustomAuth
@using System.Security.Claims

@implements IDisposable

@attribute [Authorize(Roles = "Admin, User")]

<PageTitle>User List</PageTitle>

<h1>User List</h1>

<div>

    <FluentDataGrid Items="@userList" Pagination="@pagination" MultiLine>
        <TemplateColumn Title="User">
            <FluentPersona Image="@context.PhotoUrl"
                           Name="@context.DisplayName"
                           ImageSize="50px"
                           Status="@(context.IsSignedIn ? PresenceStatus.Available : PresenceStatus.Busy)"
                           StatusSize="PresenceBadgeSize.Small" />
        </TemplateColumn>
        <TemplateColumn Title="Roles">
            <FluentStack Orientation="Orientation.Horizontal">
                @if (context.Roles != null && context.Roles.Count > 0)
                {
                    <ul>
                        @foreach (var role in context.Roles)
                        {
                            <li>
                                <strong>@role</strong>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <strong>-----</strong>
                }
            </FluentStack>
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <FluentIcon Value="@(new Icons.Regular.Size20.PhoneArrowRight())" Color="Color.Accent" OnClick="@(() => CallUser(context))" Title="Call User" />
            <span>&nbsp;</span>
            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="Color.Accent" OnClick="@(() => EditUser(context))" Title="Edit" />
            <AuthorizeView Roles="Admin">
                <Authorized Context="auth">
                    <span>&nbsp;</span>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Warning" OnClick="@(() => DeleteUser(context))" Title="Delete" />
                </Authorized>
            </AuthorizeView>
        </TemplateColumn>
    </FluentDataGrid>
    <FluentPaginator State="@pagination" />
</div>

@code {
    PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = 5,
        };

    private IQueryable<Info> userList;
    private Dictionary<string, bool> signedInUsers = new Dictionary<string, bool>();
    private string currentUserEmail;

    Dictionary<string, string> keyMap = new Dictionary<string, string>
    {
        {"IsAdmin", "Admin"},
        {"IsUser", "User"}
    };

    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        ((AuthenticationStateProvider)AuthStateProvider).AuthenticationStateChanged += AuthenticationStateChangedHandler;

        await UpdateAuthenticationStateAsync();

        await LoadUserDataAsync();
    }

    private async Task UpdateAuthenticationStateAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value;

        // Clear the signed-in dictionary
        signedInUsers.Clear();
    }

    private async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        await UpdateAuthenticationStateAsync();
        await LoadUserDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUserDataAsync()
    {
        try
        {
            var userInfoList = new List<Info>();
            var pagedEnumerable = FirebaseAuth.DefaultInstance.ListUsersAsync(null);
            var responses = pagedEnumerable.AsRawResponses().GetAsyncEnumerator();

            while (await responses.MoveNextAsync())
            {
                var response = responses.Current;
                foreach (var user in response.Users)
                {
                    // Determine if this is the signed-in user by comparing emails
                    bool isCurrentUser = !string.IsNullOrEmpty(currentUserEmail) &&
                                         user.Email.Equals(currentUserEmail, StringComparison.OrdinalIgnoreCase);

                    Info userModel = new()
                        {
                            Uid = user.Uid,
                            Email = user.Email,
                            DisplayName = user.DisplayName,
                            PhoneNumber = user.PhoneNumber,
                            PhotoUrl = user.PhotoUrl,
                            IsEmailVerified = user.EmailVerified,
                            Roles = user.CustomClaims.Where(x => (bool)x.Value).ToList().Select(s => keyMap[s.Key]).ToList(),
                            IsSignedIn = isCurrentUser
                        };
                    userInfoList.Add(userModel);
                    // Also store in our dictionary for quick lookup
                    if (isCurrentUser)
                    {
                        signedInUsers[user.Uid] = true;
                    }
                }
                userList = userInfoList.ToList().AsQueryable();
            }
            ;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    async void CallUser(Info p)
    {
        if (string.IsNullOrEmpty(p.PhoneNumber))
        {
            await DialogService.ShowWarningAsync(
                $"No phone number available for {p.DisplayName}.",
                "Cannot Place Call");
            return;
        }

        // Call the user through our service
        bool success = await PhoneDialler.PlacePhoneCallAsync(p.PhoneNumber, p.DisplayName);

        if (!success)
        {

            await DialogService.ShowWarningAsync(
                $"Unable to place call to {p.DisplayName}. Make sure the device has calling capabilities.",
                "Call Failed");
        }
    }

    void EditUser(Info p)
    {
        NavManager.NavigateTo($"editupdateuser/{p.Uid}");
    }

    async Task DeleteUser(Info p)
    {
        // Create a dialog component
        RenderFragment dialogContent = builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "style", "min-height: 6rem; padding: 1rem;");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "style", "margin-bottom: 1rem;");
            builder.AddContent(4, $"Are you sure you want to delete user '{p.DisplayName}'?");
            builder.CloseElement();

            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "style", "color: var(--neutral-foreground-hint);");
            builder.AddContent(7, "This action cannot be undone.");
            builder.CloseElement();

            builder.CloseElement();
        };

        // Show the dialog using the correct DialogService method
        var dialog = await DialogService.ShowDialogAsync(
            dialogContent,
            new DialogParameters
                {
                    Title = "Confirm Delete",
                    Width = "400px",
                    PrimaryAction = "Delete",
                    SecondaryAction = "Cancel",
                    TrapFocus = true,
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                    Modal = true
                });

        var result = await dialog.Result;
        if (result == null || result.Cancelled)
            return;

        try
        {
            // Delete the user from Firebase
            await FirebaseAuth.DefaultInstance.DeleteUserAsync(p.Uid);

            // Refresh the user list
            await LoadUserDataAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the authentication state changes when component is disposed
        ((AuthenticationStateProvider)AuthStateProvider).AuthenticationStateChanged -= AuthenticationStateChangedHandler;
    }
}
