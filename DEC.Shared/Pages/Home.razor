@page "/dashboard"
@using DEC.Shared.Services
@using Firebase.Database.Query
@using Firebase.Auth
@using System.Security.Claims

@inject IFormFactor FormFactor
@inject AuthenticationStateProvider AuthStateProvider
@inject FirebaseClient Fc

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @currentUserDisplayName</h1>

        <FluentGrid>
            <FluentGridItem xs="12" sm="6" lg="6">
                <FluentCard>
                    <div class="dashboard-card">
                        <h2>Vehicle Summary</h2>
                        @if (isLoading)
                        {
                            <FluentProgressRing />
                        }
                        else
                        {
                            <AuthorizeView Roles="Admin">
                                <Authorized Context="auth">
                                    <div class="stats-container">
                                        <div class="stat-item">
                                            <div class="stat-value">@totalVehicles</div>
                                            <div class="stat-label">Total Vehicles</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="stat-value">@vehiclesRequiringAttention</div>
                                            <div class="stat-label">Require Attention</div>
                                        </div>
                                    </div>
                                </Authorized>
                            </AuthorizeView>

                            <AuthorizeView>
                                <Authorized Context="auth">
                                    <div class="stats-container">
                                        <div class="stat-item">
                                            <div class="stat-value">@userVehicles</div>
                                            <div class="stat-label">Your Vehicles</div>
                                        </div>
                                        <div class="stat-item">
                                            <div class="stat-value">@userVehiclesRequiringAttention</div>
                                            <div class="stat-label">Require Attention</div>
                                        </div>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                            
                            <FluentButton Appearance="Appearance.Accent" 
                                          OnClick="@(() => navManager.NavigateTo("/vehiclelist"))">
                                View Vehicles
                            </FluentButton>
                        }
                    </div>
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    </Authorized>
</AuthorizeView>

<style>
    .dashboard-card {
        padding: 20px;
    }

    .stats-container {
        display: flex;
        gap: 30px;
        margin-bottom: 20px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 36px;
        font-weight: bold;
        color: var(--accent-fill-rest);
    }

    .stat-label {
        font-size: 14px;
        color: var(--neutral-foreground-hint);
        margin-top: 5px;
    }
</style>

@code {
    private bool isLoading = true;
    private int totalVehicles = 0;
    private int vehiclesRequiringAttention = 0;
    private int userVehicles = 0;
    private int userVehiclesRequiringAttention = 0;
    private string currentUserDisplayName = "";
    private string currentUserUid = "";
    
    [Inject]
    private NavigationManager navManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfo();
        await LoadVehicleData();
    }

    private async Task GetCurrentUserInfo()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserDisplayName = user.Identity?.Name ?? "";
        currentUserUid = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
        // currentUserDisplayName = user.FindFirst("DisplayName")?.Value ?? "";
        // currentUserUid = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
    }

    private async Task LoadVehicleData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var vehicles = new List<Vehicle>();

            // Get all vehicles from Firebase
            var vehicleData = await Fc.Child("Vehicle").OnceAsync<Vehicle>();
            
            foreach (var item in vehicleData)
            {
                var vehicle = item.Object;
                vehicle.Id = item.Key;
                
                try
                {
                    vehicle.UpdateVehicleStatus();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating vehicle status: {ex.Message}");
                    vehicle.IsValid = false;
                    vehicle.ValidStatus = "Error";
                }
                
                vehicles.Add(vehicle);
            }

            // Calculate statistics
            totalVehicles = vehicles.Count;
            vehiclesRequiringAttention = vehicles.Count(v => v.ValidStatus != "Good");
            
            // Calculate user-specific statistics
            userVehicles = vehicles.Count(v => v.Driver == currentUserDisplayName || v.Uid == currentUserUid);
            userVehiclesRequiringAttention = vehicles.Count(v => 
                (v.Driver == currentUserDisplayName || v.Uid == currentUserUid) && 
                v.ValidStatus != "Good");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
