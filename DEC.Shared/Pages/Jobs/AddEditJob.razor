@page "/addeditjob"
@page "/addeditjob/{jId}"


@attribute [Authorize(Roles = "Admin, User")]

@using Firebase.Auth
@using Blazored.LocalStorage
@using Firebase.Database.Query

@inject FirebaseClient Fc
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAccountManagement Acct

<FluentStack Orientation="Orientation.Vertical">
    <h2>@(!string.IsNullOrWhiteSpace(jId) ? "Update" : "Add") Job</h2>

    @if (job != null)
    {
        <EditForm Model="job" OnValidSubmit="AddUpdateJob">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 16px">
                <div>
                    <FluentTextField Name="summary" @bind-Value="@job.Summary" Label="Summary" Required="true" TextFieldType="TextFieldType.Text" />
                    <FluentValidationMessage For="@(() => job.Summary)" />
                </div>

                <div>
                    <FluentTextField Name="price" @bind-Value="@job.Price" Label="Price" Required="true" TextFieldType="TextFieldType.Text" />
                </div>

                 @* Collection Point Details *@
                <div>
                    <FluentTextArea Name="collectionPoint" @bind-Value="@job.Collection" Label="Collection Point" Required="false" Rows="4" />
                    <br />
                    <FluentDatePicker Name="collectionDate" @bind-Value="@collectionDate" Label="Collection Date" Required="false" />
                    <FluentTimePicker Name="collectionTime" @bind-Value="@collectionTime" Label="Collection Time" Required="false" />
                </div>

                @* Delivery Point Details *@
                <div>
                    <FluentTextArea Name="deliveryPoint" @bind-Value="@job.Delivery" Label="Delivery Point" Required="false" Rows="4" />
                    <FluentDatePicker Name="collectionDate" @bind-Value="@deliveryDate" Label="Delivery Date" Required="false" />
                    <FluentTimePicker Name="collectionTime" @bind-Value="@deliveryTime" Label="delivery Time" Required="false" />
                </div>

                <div>
                    <FluentSelect Items="@users"
                                  Label="Driver"
                                  Required="false"
                                  Id="driverlistbox"
                                  Placeholder="Select Driver"
                                  TOption="Option<string>"
                                  Multiple="false"
                                  OptionText="@(i => i.Text)"
                                  OptionValue="@(i => i.Value)"
                                  Value="@selectedDriverValue"
                                  ValueChanged="@(value => DriverValueChanged(value))"/>

                    <FluentValidationMessage For="@(() => job.Driver)" />
                    <FluentButton Appearance="Appearance.Outline" OnClick="AddUpdateJob" >ReAllocate Driver</FluentButton>
                </div>
                
               
                
                @if (job.Status == "Pending")
                {
                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SetOnWayToCollect">
                            On Way to Collection
                        </FluentButton>
                    </div>
                }

                @if (job.Status == "On Way to Collection")
                {
                    <div>
                        <FluentTextArea Name="atCollectionNotes" Rows="3" @bind-Value="@job.AtCollectionNotes" Label="Notes"/>
                    </div>
                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SetAtCollection">
                            At Collection Point
                        </FluentButton>
                    </div>    
                }

                @if (job.Status == "At Collection Point")
                {
                    <div>
                        <FluentTextArea Name="loadedNotes" Rows="3" @bind-Value="@job.LoadedNotes" Label="Loaded Notes"/>
                    </div>

                    // Store some photos and save as PDF

                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SetLoaded">
                            Loaded
                        </FluentButton>
                    </div>
                }
                
                @if (job.Status == "Loaded")
                {
                    <div>
                        <FluentTextArea Name="atDeliveryNotes" Rows="3" @bind-Value="@job.AtDeliveryNotes" Label="Notes"/>
                    </div>
                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SetAtDelivery">
                            At Delivery Point
                        </FluentButton>
                    </div>
                }

                @if (job.Status == "At Delivery Point")
                {
                    <div>
                        <FluentTextArea Name="deliveredNotes" Rows="3" @bind-Value="@job.DeliveredNotes" Label="Delivered Notes"/>
                    </div>

                    // Store some photos and save as PDF

                    <div>
                        <FluentTextField Name="receivedBy" @bind-Value="@job.ReceivedBy" Label="Received By"/>
                    </div>

                    // Add Signature Capture

                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="SetDelivered">
                            Delivered
                        </FluentButton>
                    </div>
                }

                @if (job.Status == "Delivered")
                {
                    <div>
                        <FluentButton Appearance="Appearance.Accent" OnClick="ShowHistory">
                            ShowHistory
                        </FluentButton>
                    </div>
                }
                
                <AuthorizeView Roles="Admin">
                    <Authorized Context="auth">
                        <div>
                            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">
                                @(!string.IsNullOrWhiteSpace(jId) ? "Update" : "Add") Job
                            </FluentButton>
                            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Outline" OnClick="@(() => NavManager.NavigateTo("/jobslist"))">Cancel</FluentButton>
                        </div>
                    </Authorized>
                </AuthorizeView>
                
            </FluentStack>
        </EditForm>
    }
    else
    {
        <FluentProgressRing />
        <p>Loading...</p>
    }

</FluentStack>


@code {
    private Job job = null;
    private string selectedDriverValue;
    private bool isCompleted = false;

    private string _jId;
    [Parameter]
    public string? jId
    {
        get => _jId;
        set
        {
            if (_jId != value)
            {
                _jId = value;
                // Reset selections when ID changes
                selectedDriverValue = null;
            }
        }
    }
    private List<Option<string>> users = new();

    static List<Option<string>> statusTypes = new()
    {
        {new Option<string> { Value = "Pending", Text = "Pending" } },
        {new Option<string> { Value = "On Way to Collection", Text = "On Way to Collection" } },
        {new Option<string> { Value = "At Collection Point", Text = "At Collection Point" } },
        {new Option<string> { Value = "Loaded", Text = "Loaded" } },
        {new Option<string> { Value = "At Delivery Point", Text = "At Delivery Point" } },
        {new Option<string> { Value = "Delivered", Text = "Delivered" } },
        {new Option<string> { Value = "Cancelled", Text = "Cancelled" } },
    };

    private DateTime pendDate;
    private DateTime pendTime;


    //  Dates and Times for Job Statuses
    private DateTime? collectionDate;
    private DateTime? collectionTime;
    private DateTime? deliveryDate;
    private DateTime? deliveryTime;
    private DateTime? onwayDate;
    private DateTime? onwayTime;
    private DateTime? atcollectionDate;
    private DateTime? atcollectionTime;
    private DateTime? loadedDate;
    private DateTime? loadedTime;
    private DateTime? atdeliveryDate;
    private DateTime? atdeliveryTime;
    private DateTime? deliveredDate;
    private DateTime? deliveredTime;

    private void CombineCollectionDateTime()
    {
        if (collectionDate.HasValue && collectionTime.HasValue)
        {
            string collectionDateTime = $"{collectionDate.Value:yyyy-MM-dd}T{collectionTime.Value:HH:mm:ss}";

            job.CollectionDate = collectionDateTime;
        }
    }

    private void CombineDeliveryDateTime()
    {
        if (deliveryDate.HasValue && deliveryTime.HasValue)
        {
            string deliveryDateTime = $"{deliveryDate.Value:yyyy-MM-dd}T{deliveryTime.Value:HH:mm:ss}";

            job.DeliveryDate = deliveryDateTime;
        }
    }

    private string GetDriverDisplayName(string combinedValue)
    {
        if (string.IsNullOrEmpty(combinedValue))
            return string.Empty;

        var parts = combinedValue.Split('|');
        return parts.Length > 0 ? parts[0] : combinedValue;
    }

    private string GetDriverUid(string combinedValue)
    {
        if (string.IsNullOrEmpty(combinedValue))
            return string.Empty;

        var parts = combinedValue.Split('|');
        return parts.Length > 1 ? parts[1] : string.Empty;
    }

    private void DriverValueChanged(string value)
    {
        selectedDriverValue = value;
        if (!string.IsNullOrEmpty(value))
        {
            // Store the combined value for processing later
            job.Driver = GetDriverDisplayName(value);
            job.Uid = GetDriverUid(value);
            if (!string.IsNullOrWhiteSpace(job.Status)){
                job.Status = job.Status;
                job.PendingDate = job.PendingDate;

            }

            job.IsAllocated = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Fc = new FirebaseClient(Cnst.FirebaseDatabaseUrl, new FirebaseOptions()
        {
            AuthTokenAsyncFactory = Acct.GetAuthTokenAsync
        });




        try
        {
            // Clear any previously selected values
            selectedDriverValue = null;

            await LoadUsersAsync();
            await LoadJobAsync();

            if (job != null)
            {
                if (!string.IsNullOrEmpty(job.CollectionDate))
                {
                    DateTime.TryParse(job.CollectionDate?.Replace(".:", ":"), out DateTime parsedDate);
                    collectionDate = parsedDate; 
                    collectionTime = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.CollectionTime))
                // {
                //     DateTime.TryParse(job.CollectionTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     collectionTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.DeliveryDate))
                {
                    DateTime.TryParse(job.DeliveryDate?.Replace(".:", ":"), out DateTime parsedDate);
                    deliveryDate = parsedDate;
                    deliveryTime = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.DeliveryTime))
                // {
                //     DateTime.TryParse(job.DeliveryTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     deliveryTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.OnWayDate))
                {
                    DateTime.TryParse(job.OnWayDate?.Replace(".:", ":"), out DateTime parsedDate);
                    onwayDate = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.OnWayTime))
                // {
                //     DateTime.TryParse(job.OnWayTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     onwayTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.AtCollectionDate))
                {
                    DateTime.TryParse(job.AtCollectionDate?.Replace(".:", ":"), out DateTime parsedDate);
                    atcollectionDate = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.AtCollectionTime))
                // {
                //     DateTime.TryParse(job.AtCollectionTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     atcollectionTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.LoadedDate))
                {
                    DateTime.TryParse(job.LoadedDate?.Replace(".:", ":"), out DateTime parsedDate);
                    loadedDate = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.LoadedTime))
                // {
                //     DateTime.TryParse(job.LoadedTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     loadedTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.AtDeliveryDate))
                {
                    DateTime.TryParse(job.AtDeliveryDate?.Replace(".:", ":"), out DateTime parsedDate);
                    atdeliveryDate = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.AtDeliveryTime))
                // {
                //     DateTime.TryParse(job.AtDeliveryTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     atdeliveryTime = parsedTime;
                // }
                if (!string.IsNullOrEmpty(job.DeliveredDate))
                {
                    DateTime.TryParse(job.DeliveredDate?.Replace(".:", ":"), out DateTime parsedDate);
                    deliveredDate = parsedDate;
                }
                // if (!string.IsNullOrEmpty(job.DeliveredTime))
                // {
                //     DateTime.TryParse(job.DeliveredTime?.Replace(".:", ":"), out DateTime parsedTime);
                //     deliveredTime = parsedTime;
                // }
            }

            await GetInitialSelections();


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in initialization: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            users.Clear();
            Console.WriteLine("Loading users...");

            // Get users from Firebase Auth
            var pagedEnumerable = FirebaseAuth.DefaultInstance.ListUsersAsync(null);
            var responses = pagedEnumerable.AsRawResponses().GetAsyncEnumerator();

            while (await responses.MoveNextAsync())
            {
                var response = responses.Current;
                foreach (var user in response.Users)
                {
                    if (!string.IsNullOrEmpty(user.DisplayName))
                    {
                        var option = new Option<string>
                        {
                            Value = $"{user.DisplayName}|{user.Uid}",
                            Text = user.DisplayName
                        };
                        users.Add(option);
                        Console.WriteLine($"Added user: {option.Text} with value: {option.Value}");
                    }
                }
            }

            Console.WriteLine($"Loaded {users.Count} users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private async Task LoadJobAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(jId))
            {
                var jResponse = await Fc.Child($"Job/{jId}").OnceSingleAsync<Job>();
                if (jResponse != null)
                {
                    job = jResponse;

                    // If we have a Driver name but no UID, we'll need to set it up
                    // for the correct format when users are loaded
                    if (!string.IsNullOrEmpty(job.Driver) && string.IsNullOrEmpty(job.Uid))
                    {
                        // We'll match this up in LoadUsersAsync later
                        Console.WriteLine($"Vehicle has Driver '{job.Driver}' but no UID");
                    }
                }
                else
                {
                    job = new Job();
                }
            }
            else
            {
                job = new Job();
            }
        }
        catch (Firebase.Database.FirebaseException ex)
        {
            Console.WriteLine($"Firebase error: {ex.Message}");
            job = new Job();
        }
        StateHasChanged();
    }

    private void UpdateOnWayString(ChangeEventArgs args = null)
    {
        if (onwayDate.HasValue)
        {
            job.OnWayDate = onwayDate.Value.ToString("yyyy-MM-dd");
        }
        if (onwayTime.HasValue)
        {
            job.OnWayTime = onwayTime.Value.ToString("HH:mm:ss");
        }
    }

    private void UpdateAtCollectionString(ChangeEventArgs args = null)
    {
        if (atcollectionDate.HasValue)
        {
            job.AtCollectionDate = atcollectionDate.Value.ToString("yyyy-MM-dd");
        }
        if (atcollectionTime.HasValue)
        {
            job.AtCollectionTime = atcollectionTime.Value.ToString("HH:mm:ss");
        }
    }

    private void UpdateLoadedString(ChangeEventArgs args = null)
    {
        if (loadedDate.HasValue)
        {
            job.LoadedDate = loadedDate.Value.ToString("yyyy-MM-dd");
        }
        if (loadedTime.HasValue)
        {
            job.LoadedTime = loadedTime.Value.ToString("HH:mm:ss");
        }
    }

    private void UpdateAtDeliveryString(ChangeEventArgs args = null)
    {
        if (atdeliveryDate.HasValue)
        {
            job.AtDeliveryDate = atdeliveryDate.Value.ToString("yyyy-MM-dd");
        }
        if (atdeliveryTime.HasValue)
        {
            job.AtDeliveryTime = atdeliveryTime.Value.ToString("HH:mm:ss");
        }
    }

    private void UpdateDeliveredString(ChangeEventArgs args = null)
    {
        if (deliveredDate.HasValue)
        {
            job.DeliveredDate = deliveredDate.Value.ToString("yyyy-MM-dd");
        }
        if (deliveredTime.HasValue)
        {
            job.DeliveredTime = deliveredTime.Value.ToString("HH:mm:ss");
        }
        
    }

    private async Task AddUpdateJob()
    {
        bool success = true;

        try
        {
            // Update Date Fields
            CombineCollectionDateTime();
            CombineDeliveryDateTime();
            UpdateOnWayString();
            UpdateAtCollectionString();
            UpdateLoadedString();
            UpdateAtDeliveryString();
            UpdateDeliveredString();


            if (!string.IsNullOrWhiteSpace(jId))
            {
                // Edit Mode
                if (!string.IsNullOrEmpty(job.Driver) && string.IsNullOrEmpty(job.Status))
                {
                    job.Status = "Pending"; // Default status if not set
                    job.PendingDate = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
                }
                await Fc.Child($"Job/{jId}").PutAsync(job);
                Console.WriteLine($"Updated job with ID: {jId}");
            }
            else
            {
                // Add Mode
                var result = await Fc.Child($"Job").PostAsync(job);
                Console.WriteLine($"Added new vehicle with key: {result.Key}");
            }

            if (success)
            {
                NavManager.NavigateTo("/jobslist");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding/updating job: {ex.Message}");
            success = false;
        }
    }

    private async Task GetInitialSelections()
    {
        try
        {
            if (job != null && !string.IsNullOrEmpty(job.Driver))
            {
                // Find the user that matches the job's driver name
                var matchingUser = users.FirstOrDefault(u => u.Text == job.Driver);
                if (matchingUser != null)
                {
                    selectedDriverValue = matchingUser.Value;

                    job.Uid = GetDriverUid(selectedDriverValue);
                    Console.WriteLine($"Selected driver: {job.Driver} with UID: {job.Uid}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting initial selections: {ex.Message}");
        }
    }

    private async Task SetOnWayToCollect()
    {
        DateTime now = DateTime.Now;
               
        job.Status = "On Way to Collection";


        job.OnWayDate = now.ToString("yyyy-MM-ddTHH:mm:ss");
        // job.OnWayTime = now.ToString("HH:mm:ss");

        await AddUpdateJob();
    }

    private async Task SetAtCollection()
    {
        DateTime now = DateTime.Now;
        job.Status = "At Collection Point";
        job.AtCollectionDate = now.ToString("yyyy-MM-ddTHH:mm:ss");
        // job.AtCollectionTime = now.ToString("HH:mm:ss");
        await AddUpdateJob();
    }

    private async Task SetLoaded()
    {
        DateTime now = DateTime.Now;
        job.Status = "Loaded";
        job.LoadedDate = now.ToString("yyyy-MM-ddTHH:mm:ss");
        // job.LoadedTime = now.ToString("HH:mm:ss");
        await AddUpdateJob();
    }

    private async Task SetAtDelivery()
    {
        DateTime now = DateTime.Now;
        job.Status = "At Delivery Point";
        job.AtDeliveryDate = now.ToString("yyyy-MM-ddTHH:mm:ss");
        // job.AtDeliveryTime = now.ToString("HH:mm:ss");
        await AddUpdateJob();
    }

    private async Task SetDelivered()
    {
        DateTime now = DateTime.Now;
        job.Status = "Delivered";
        job.DeliveredDate = now.ToString("yyyy-MM-ddTHH:mm:ss");
        // job.DeliveredTime = now.ToString("HH:mm:ss");
        job.IsCompleted = true; // Mark job as completed
        await AddUpdateJob();
    }

    private async Task ShowHistory()
    {
        // Navigate to the job history page with the current job ID
        NavManager.NavigateTo($"/jobhistory/{jId}");
    }
}
