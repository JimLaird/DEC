@page "/nflist"

@inject FirebaseClient Fc
@inject NavigationManager NavManager
@inject IDialogService DialogService

@using DEC.Shared.Models
@using Firebase.Database.Query
@using System.Reactive.Linq

@attribute [Authorize(Roles = "Admin, User")]

<PageTitle>NonFactored</PageTitle>

<div class="row">
    <h1>Non Factored List</h1>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <FluentButton Appearance="Appearance.Accent" OnClick="@AddNF">Add Client</FluentButton>
        </Authorized>
    </AuthorizeView>
</div>

@if (isLoading)
{
    <FluentProgressRing />
    <p>Loading data...</p>
}
else if (nonFactoredList == null || !nonFactoredList.Any())
{
    <p>No Data. Please add Non Factored Clients</p>
}
else
{
    <div>
        <FluentDataGrid Items="@nonFactoredList" Pagination="@pagination" TGridItem="NonFactored">
            <PropertyColumn Property="@(n => n.Name)" Sortable="true" Title="Client Name" />
            <PropertyColumn Property="@(n => n.Cx)" Sortable="true" Title="CX No." />

            <TemplateColumn Title="Actions">
                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="Color.Accent" OnClick="@(() => EditNF(context.Id))" />
                
                    <AuthorizeView Roles="Admin">
                        <Authorized Context="auth">
                    <span>&nbsp;</span>
                <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Warning" OnClick="@(() => DeleteNF(context.Id))" />
                </Authorized>
                </AuthorizeView>
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator State="@pagination" />
    </div>
}

@code {
    PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = 10,
        };

    private IQueryable<NonFactored>? nonFactoredList;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadNFDataAsync();
    }

    private async Task LoadNFDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var List = new List<NonFactored>();

            Fc.Child("NF")
                .AsObservable<NonFactored>()
                .Subscribe(item =>
                 {
                     if (item.Object != null)
                     {
                         item.Object.Id = item.Key;
                         List.Add(item.Object);
                         nonFactoredList = List.AsQueryable();
                     }
                 });

            // Wait a moment for data to load
            await Task.Delay(2000);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Firebase error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void EditNF(string Id)
    {
        NavManager.NavigateTo($"/addeditnf/{Id}");
    }

    async Task DeleteNF(string Id)
    {
        // Find the client name for the confirmation message
        var clientToDelete = nonFactoredList?.FirstOrDefault(n => n.Id == Id);
        string clientName = clientToDelete?.Name ?? "this client";

        // Create the dialog content
        RenderFragment dialogContent = builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "style", "min-height: 6rem; padding: 1rem;");

            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "style", "margin-bottom: 1rem;");
            builder.AddContent(4, $"Are you sure you want to delete client '{clientName}'?");
            builder.CloseElement();

            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "style", "color: var(--neutral-foreground-hint);");
            builder.AddContent(7, "This action cannot be undone.");
            builder.CloseElement();

            builder.CloseElement();
        };

        // Show the confirmation dialog
        var dialog = await DialogService.ShowDialogAsync(
            dialogContent,
            new DialogParameters
                {
                    Title = "Confirm Delete",
                    Width = "400px",
                    PrimaryAction = "Delete",
                    SecondaryAction = "Cancel",
                    TrapFocus = true,
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                    Modal = true
                });

        var result = await dialog.Result;
        if (result == null || result.Cancelled)
            return;

        try
        {
            // Delete the client from Firebase
            await Fc.Child($"NF/{Id}").DeleteAsync();

            // Refresh the data
            await LoadNFDataAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting client: {ex.Message}");

            // Show an error dialog if deletion fails
            RenderFragment errorContent = builder =>
            {
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "style", "min-height: 4rem; padding: 1rem;");
                builder.AddContent(2, $"Failed to delete client: {ex.Message}");
                builder.CloseElement();
            };

            await DialogService.ShowDialogAsync(
                errorContent,
                new DialogParameters
                    {
                        Title = "Error",
                        Width = "400px",
                        PrimaryAction = "OK",
                        Modal = true
                    });
        }
    }

    private void AddNF()
    {
        NavManager.NavigateTo("/addeditnf");
    }
}

