@page "/nflist"

@inject FirebaseClient Fc
@inject NavigationManager NavManager
@inject IDialogService DialogService

@using DEC.Shared.Models
@using Firebase.Database.Query
@using System.Reactive.Linq

@attribute [Authorize(Roles = "Admin, User")]

<PageTitle>NonFactored</PageTitle>

<div class="row">
    <h1>Non Factored List</h1>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <FluentButton Appearance="Appearance.Accent" OnClick="@AddNF">Add Client</FluentButton>
        </Authorized>
    </AuthorizeView>
</div>

<div>
    <FluentTextField Placeholder="Search by Name or CX" @bind-Value="@searchQuery" @oninput="OnSearchInput" />
</div>

@if (isLoading)
{
    <FluentProgressRing />
    <p>Loading data...</p>
}
else if (filteredNonFactoredList == null || !filteredNonFactoredList.Any())
{
    <p>No Data. Please add Non Factored Clients</p>
}
else
{
    <div>
        <FluentDataGrid Items="@filteredNonFactoredList" Pagination="@pagination" TGridItem="NonFactored">
            <PropertyColumn Property="@(n => n.Name)" Sortable="true" Title="Client Name" SortBy="@rankSort" />
            <PropertyColumn Property="@(n => n.Cx)" Sortable="true" Title="CX No." />

            <TemplateColumn Title="Actions">
                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="Color.Accent" OnClick="@(() => EditNF(context.Id))" />

                <AuthorizeView Roles="Admin">
                    <Authorized Context="auth">
                        <span>&nbsp;</span>
                        <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Warning" OnClick="@(() => DeleteNF(context.Id))" />
                    </Authorized>
                </AuthorizeView>
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator State="@pagination" />
    </div>
}

@code {
    PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = 10,
        };

    private IQueryable<NonFactored>? nonFactoredList;
    private IQueryable<NonFactored>? filteredNonFactoredList;
    private bool isLoading = true; 
    private List<NonFactored> nfList = new List<NonFactored>();
    private string searchQuery = string.Empty;

    GridSort<NonFactored> rankSort = GridSort<NonFactored>
        .ByAscending(x => x.Name);

    protected override async Task OnInitializedAsync()
    {
        await LoadNFDataAsync();
        filteredNonFactoredList = nonFactoredList; // Initialize filtered list
    }

    private async Task LoadNFDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Clear any existing data
            nfList.Clear();

            // Store the subscription for proper cleanup
            var subscription = Fc.Child("NF")
                .AsObservable<NonFactored>()
                .Subscribe(item =>
                {
                    if (item.Object != null)
                    {
                        item.Object.Id = item.Key;
                        nfList.Add(item.Object);
                        nonFactoredList = nfList.AsQueryable();
                        FilterData(); // Apply any current filters
                        InvokeAsync(StateHasChanged); // Notify UI of changes
                    }
                });

            // Wait a moment for initial data to load
            await Task.Delay(2000);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Firebase error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterData();
    }

    private void FilterData()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredNonFactoredList = nonFactoredList;
        }
        else
        {
            filteredNonFactoredList = nonFactoredList?
                .Where(n =>
                    (n.Name != null && n.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) ||
                    (n.Cx != null && n.Cx.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                .AsQueryable();
        }

        InvokeAsync(StateHasChanged);
    }

    private void AddNF()
    {
        NavManager.NavigateTo("/addeditnf");
    }

    private void EditNF(string Id)
    {
        NavManager.NavigateTo($"/addeditnf/{Id}");
    }

    private async Task DeleteNF(string Id)
    {
        var clientToDelete = nonFactoredList?.FirstOrDefault(n => n.Id == Id);
        string clientName = clientToDelete?.Name ?? "this client";

        RenderFragment dialogContent = builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "style", "min-height: 6rem; padding: 1rem;");
            builder.AddContent(2, $"Are you sure you want to delete client '{clientName}'?");
            builder.CloseElement();
        };

        var dialog = await DialogService.ShowDialogAsync(
            dialogContent,
            new DialogParameters
                {
                    Title = "Confirm Delete",
                    Width = "400px",
                    PrimaryAction = "Delete",
                    SecondaryAction = "Cancel",
                    Modal = true
                });

        var result = await dialog.Result;
        if (result == null || result.Cancelled)
            return;

        try
        {
            await Fc.Child($"NF/{Id}").DeleteAsync();
            await LoadNFDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting client: {ex.Message}");
        }
    }
}
