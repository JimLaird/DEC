@page "/testupload"
@using DEC.Shared.Services
@using System.IO
@inject IFirebaseStorageService FirebaseStorageService

<h3>Test File Upload</h3>



@if (!string.IsNullOrEmpty(imageUrl))
{
    <div class="mb-3">
        <label class="form-label">Image URL:</label>
        <input type="text" class="form-control" value="@imageUrl" readonly />
    </div>

    <div class="mt-3">
        <h4>Uploaded Image:</h4>
        <img src="@imageUrl" alt="Uploaded image" style="max-width: 100%; max-height: 400px;" />
    </div>
}

<FluentDivider></FluentDivider>

<FluentInputFile @ref="@myFileByStream"
AnchorId="MyUploadStream"
DragDropZoneVisible="false"
Mode="InputFileMode.Stream"
Multiple="false"
MaximumFileSize="@(10 * 1024 * 1024)"
Accept=".jpg, .jpeg, .png"
OnFileUploaded="@OnFileUploadedAsync"
OnCompleted="@OnCompleted"/>

<FluentProgress 
Min="0" 
Max="100" 
Value="@progressPercent" 
Visible="@(progressPercent > 0)" />

<FluentLabel Alignment="HorizontalAlignment.Center">
    @progressTitle
</FluentLabel>

<FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">UploadFiles</FluentButton>

@if (Files.Any()){
    <h4>File(s) uploaded:</h4>
    <ul>
        @foreach (var file in Files)
        {
            <li>
                @file
            </li>
        }
    </ul>
}

@code {



    FluentInputFile? myFileByStream = default;
    int? progressPercent;
    string? progressTitle;
    List<string> Files = new();

    async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        progressPercent = file.ProgressPercent;
        progressTitle = file.ProgressTitle;

        var localFile = Path.GetTempFileName() + file.Name;

        // Generate a unique filename to avoid overwrites
        string fileExtension = Path.GetExtension(file.Name);
        string uniqueFileName = $"{Guid.NewGuid()}{fileExtension}";


        Files.Add(localFile);

        // Write to the FileStream
        // See other samples: https://docs.microsoft.com/en-us/aspnet/core/blazor/file-uploads
        // await using FileStream fs = new(localFile, FileMode.Create);
        // await file.Stream!.CopyToAsync(fs);
        // await file.Stream!.DisposeAsync();

        await using FileStream fs = new(localFile, FileMode.Create);
        imageUrl = await FirebaseStorageService.UploadFile(file.Stream!, uniqueFileName);

        await fs.DisposeAsync();
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = myFileByStream!.ProgressPercent;
        progressTitle = myFileByStream!.ProgressTitle;

        // For the demo, delete these files.
        foreach (var file in Files)
        {
            File.Delete(file);
        }
    }

    private IBrowserFile? selectedFile;
    private string? imageUrl;
    
}
