@page "/addtodo"

@using Firebase.Auth
@using Blazored.LocalStorage
@using Firebase.Database.Query
@using System.Security.Claims

@inject FirebaseClient Fc
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAccountManagement Acct

<PageTitle>Add Task</PageTitle>

<h2>Add Task</h2>

@if (newTodo != null)
{
    <EditForm Model="newTodo" OnValidSubmit="AddTask">
        <DataAnnotationsValidator />
        <FluentValidationSummary />

        <FluentStack Orientation="Orientation.Vertical" Style="gap: 16px">
            <div>
                <FluentTextField Name="todotitle" @bind-Value="newTodo.Title" Label="Title" Required="true" Placeholder="Enter task title" />
            </div>
            <div>
                <FluentTextArea Name="tododescription" @bind-Value="newTodo.Description" Label="Description" Placeholder="Enter task description" Rows="3" />
            </div>

            <AuthorizeView Roles="Admin">
                <Authorized Context="adminContext">
                    <div>
                        <FluentSelect Items="@users"
                                      Label="Owner/Driver"
                                      Required="true"
                                      Id="driverlistbox"
                                      Placeholder="Select Driver"
                                      TOption="Option<string>"
                                      Multiple="false"
                                      OptionText="@(i => i.Text)"
                                      OptionValue="@(i => i.Value)"
                                      @bind-Value="@selectedDriverValue" />
                    </div>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Roles="User">
                <Authorized Context="userContext">
                    <div class="mb-3 border p-3 bg-light">
                        <h5>Task Assignment</h5>
                        <p>This task will be assigned to you: <strong>@currentUserDisplayName</strong></p>
                        <p class="text-muted small">User ID: @currentUserUid</p>
                    </div>
                </Authorized>
            </AuthorizeView>

            <div>
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Add Task</FluentButton>
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Outline" OnClick="@(() => NavManager.NavigateTo("/todolist"))">Cancel</FluentButton>
            </div>
        </FluentStack>
    </EditForm>
}
else
{
    <FluentProgressRing />
    <p>Loading...</p>
}

@code {
    private Todo newTodo = null;
    private List<Option<string>> users = new();
    private string selectedDriverValue;
    private string currentUserDisplayName;
    private string currentUserUid;
    private string currentUserEmail;
    private bool isAdminUser = false;

    private string GetDriverDisplayName(string combinedValue)
    {
        if (string.IsNullOrEmpty(combinedValue))
            return string.Empty;

        var parts = combinedValue.Split('|');
        return parts.Length > 0 ? parts[0] : combinedValue;
    }

    private string GetDriverUid(string combinedValue)
    {
        if (string.IsNullOrEmpty(combinedValue))
            return string.Empty;

        var parts = combinedValue.Split('|');
        return parts.Length > 1 ? parts[1] : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Setup Firebase client
            Fc = new FirebaseClient(Cnst.FirebaseDatabaseUrl, new FirebaseOptions()
            {
                AuthTokenAsyncFactory = Acct.GetAuthTokenAsync
            });

            // Initialize the Todo
            newTodo = new Todo();

            // Get current user information
            await GetCurrentUserInfo();

            // Load users for admin selection
            if (isAdminUser)
            {
                await LoadUsersAsync();
            }

            // For regular users, auto-assign the todo to themselves immediately
            if (!isAdminUser)
            {
                AssignToCurrentUser();
            }

            Console.WriteLine($"Initialization complete - User: {currentUserDisplayName}, IsAdmin: {isAdminUser}, Driver: {newTodo.Driver}, Uid: {newTodo.Uid}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in initialization: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private void AssignToCurrentUser()
    {
        if (!string.IsNullOrEmpty(currentUserDisplayName))
        {
            newTodo.Driver = currentUserDisplayName;
            Console.WriteLine($"Assigned Driver: {newTodo.Driver}");
        }

        if (!string.IsNullOrEmpty(currentUserUid))
        {
            newTodo.Uid = currentUserUid;
            Console.WriteLine($"Assigned Uid: {newTodo.Uid}");
        }
    }

    private async Task GetCurrentUserInfo()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                // Get user role
                isAdminUser = user.IsInRole("Admin");
                Console.WriteLine($"User is Admin: {isAdminUser}");

                // Get display name claim
                var displayNameClaim = user.FindFirst("displayName") ?? user.FindFirst("name");
                if (displayNameClaim != null)
                {
                    currentUserDisplayName = displayNameClaim.Value;
                    Console.WriteLine($"Found display name in claims: {currentUserDisplayName}");
                }

                // Get user ID
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    currentUserUid = userIdClaim.Value;
                    Console.WriteLine($"Found UID in claims: {currentUserUid}");
                }

                // Get email
                var emailClaim = user.FindFirst(ClaimTypes.Email);
                if (emailClaim != null)
                {
                    currentUserEmail = emailClaim.Value;
                    Console.WriteLine($"Found email in claims: {currentUserEmail}");
                }

                // If we're missing information, try to get more from different sources
                if (string.IsNullOrEmpty(currentUserDisplayName) || string.IsNullOrEmpty(currentUserUid))
                {
                    await GetAdditionalUserInfo();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting current user info: {ex.Message}");
        }
    }

    private async Task GetAdditionalUserInfo()
    {
        // Try Firebase Auth first if we have UID
        if (!string.IsNullOrEmpty(currentUserUid) && string.IsNullOrEmpty(currentUserDisplayName))
        {
            await GetUserDisplayNameFromFirebase(currentUserUid);
        }

        // Try Firebase Auth with email if we have email but no UID or display name
        if (!string.IsNullOrEmpty(currentUserEmail) &&
            (string.IsNullOrEmpty(currentUserUid) || string.IsNullOrEmpty(currentUserDisplayName)))
        {
            await GetUserInfoByEmail(currentUserEmail);
        }

        // Try local storage as a fallback
        if (string.IsNullOrEmpty(currentUserDisplayName) || string.IsNullOrEmpty(currentUserUid))
        {
            await GetUserInfoFromLocalStorage();
        }

        // If we have email but still no display name, use email username
        if (string.IsNullOrEmpty(currentUserDisplayName) && !string.IsNullOrEmpty(currentUserEmail))
        {
            currentUserDisplayName = currentUserEmail.Split('@')[0];
            Console.WriteLine($"Using email username as display name: {currentUserDisplayName}");
        }
    }

    private async Task GetUserDisplayNameFromFirebase(string uid)
    {
        try
        {
            // Get user info from Firebase Auth
            var user = await FirebaseAuth.DefaultInstance.GetUserAsync(uid);
            if (user != null)
            {
                if (string.IsNullOrEmpty(currentUserDisplayName) && !string.IsNullOrEmpty(user.DisplayName))
                {
                    currentUserDisplayName = user.DisplayName;
                    Console.WriteLine($"Got display name from Firebase: {currentUserDisplayName}");
                }

                if (string.IsNullOrEmpty(currentUserEmail) && !string.IsNullOrEmpty(user.Email))
                {
                    currentUserEmail = user.Email;
                    Console.WriteLine($"Got email from Firebase: {currentUserEmail}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting user info from Firebase: {ex.Message}");
        }
    }

    private async Task GetUserInfoByEmail(string email)
    {
        try
        {
            var user = await FirebaseAuth.DefaultInstance.GetUserByEmailAsync(email);
            if (user != null)
            {
                if (string.IsNullOrEmpty(currentUserUid))
                {
                    currentUserUid = user.Uid;
                    Console.WriteLine($"Got UID from Firebase by email: {currentUserUid}");
                }

                if (string.IsNullOrEmpty(currentUserDisplayName) && !string.IsNullOrEmpty(user.DisplayName))
                {
                    currentUserDisplayName = user.DisplayName;
                    Console.WriteLine($"Got display name from Firebase by email: {currentUserDisplayName}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting user by email from Firebase: {ex.Message}");
        }
    }

    private async Task GetUserInfoFromLocalStorage()
    {
        try
        {
            // Try to get user info from local storage
            var userInfoStr = await LocalStorageService.GetItemAsStringAsync("userInfo");
            if (!string.IsNullOrEmpty(userInfoStr))
            {
                try
                {
                    var options = new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    var userInfo = System.Text.Json.JsonSerializer.Deserialize<UserInfo>(userInfoStr, options);

                    if (userInfo != null)
                    {
                        if (string.IsNullOrEmpty(currentUserUid) && !string.IsNullOrEmpty(userInfo.Uid))
                        {
                            currentUserUid = userInfo.Uid;
                            Console.WriteLine($"Got UID from local storage: {currentUserUid}");
                        }

                        if (string.IsNullOrEmpty(currentUserDisplayName) && !string.IsNullOrEmpty(userInfo.DisplayName))
                        {
                            currentUserDisplayName = userInfo.DisplayName;
                            Console.WriteLine($"Got display name from local storage: {currentUserDisplayName}");
                        }

                        if (string.IsNullOrEmpty(currentUserEmail) && !string.IsNullOrEmpty(userInfo.Email))
                        {
                            currentUserEmail = userInfo.Email;
                            Console.WriteLine($"Got email from local storage: {currentUserEmail}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing user info: {ex.Message}");
                }
            }

            // Check for individual items in local storage
            if (string.IsNullOrEmpty(currentUserUid))
            {
                var uid = await LocalStorageService.GetItemAsStringAsync("uid");
                if (!string.IsNullOrEmpty(uid))
                {
                    currentUserUid = uid;
                    Console.WriteLine($"Got UID directly from local storage: {currentUserUid}");
                }
            }

            if (string.IsNullOrEmpty(currentUserDisplayName))
            {
                var displayName = await LocalStorageService.GetItemAsStringAsync("displayName");
                if (!string.IsNullOrEmpty(displayName))
                {
                    currentUserDisplayName = displayName;
                    Console.WriteLine($"Got display name directly from local storage: {currentUserDisplayName}");
                }
            }

            if (string.IsNullOrEmpty(currentUserEmail))
            {
                var email = await LocalStorageService.GetItemAsStringAsync("userEmail");
                if (!string.IsNullOrEmpty(email))
                {
                    currentUserEmail = email;
                    Console.WriteLine($"Got email directly from local storage: {currentUserEmail}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accessing local storage: {ex.Message}");
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            users.Clear();
            Console.WriteLine("Loading users for admin selection...");

            // Get users from Firebase Auth
            var pagedEnumerable = FirebaseAuth.DefaultInstance.ListUsersAsync(null);
            var responses = pagedEnumerable.AsRawResponses().GetAsyncEnumerator();

            while (await responses.MoveNextAsync())
            {
                var response = responses.Current;
                foreach (var user in response.Users)
                {
                    if (!string.IsNullOrEmpty(user.DisplayName))
                    {
                        var option = new Option<string>
                        {
                            Value = $"{user.DisplayName}|{user.Uid}",
                            Text = user.DisplayName
                        };
                        users.Add(option);
                    }
                }
            }

            Console.WriteLine($"Loaded {users.Count} users for selection");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task AddTask()
    {
        try
        {
            Console.WriteLine("Adding task...");

            // For admin users, process the selected driver
            if (isAdminUser && !string.IsNullOrEmpty(selectedDriverValue))
            {
                newTodo.Driver = GetDriverDisplayName(selectedDriverValue);
                newTodo.Uid = GetDriverUid(selectedDriverValue);
                Console.WriteLine($"Admin selected driver: {newTodo.Driver}, UID: {newTodo.Uid}");
            }
            // For regular users, ensure their info is assigned
            else if (!isAdminUser)
            {
                // Double-check the assignment in case it wasn't done earlier
                AssignToCurrentUser();
            }

            // Ensure we have driver info before saving
            if (string.IsNullOrEmpty(newTodo.Driver))
            {
                Console.WriteLine("WARNING: Driver is empty before saving!");
                if (!string.IsNullOrEmpty(currentUserDisplayName))
                {
                    newTodo.Driver = currentUserDisplayName;
                }
            }

            if (string.IsNullOrEmpty(newTodo.Uid))
            {
                Console.WriteLine("WARNING: Uid is empty before saving!");
                if (!string.IsNullOrEmpty(currentUserUid))
                {
                    newTodo.Uid = currentUserUid;
                }
            }

            Console.WriteLine($"About to save task - Title: {newTodo.Title}, Driver: {newTodo.Driver}, UID: {newTodo.Uid}");

            // Post to Firebase
            var result = await Fc
                .Child("TODO")
                .PostAsync(newTodo);

            Console.WriteLine($"Task saved successfully with key: {result.Key}");
            NavManager.NavigateTo("/todolist");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving todo: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    // Helper class for user info deserialization
    private class UserInfo
    {
        public string Uid { get; set; }
        public string DisplayName { get; set; }
        public string Email { get; set; }
    }
}